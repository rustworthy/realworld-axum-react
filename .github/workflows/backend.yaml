name: backend
permissions:
  contents: read
on:
  push:
    paths:
      - '.github/workflows/backend.yaml'
      - 'backend/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo fmt --check
        run: cargo fmt --check
      - name: SQLX_OFFLINE=1 cargo clippy
        run: SQLX_OFFLINE=1 cargo clippy
      - name: cargo doc --no-deps --all-features
        run: cargo doc --no-deps --all-features
  unit-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: run API tests
        run: cargo test --release
  api-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: run API tests
        run: cargo test --release --test api --features=api-test
  e2e-tests:
    uses: './.github/workflows/e2e.yaml'
  deploy:
    if: github.ref == 'refs/heads/main' 
    needs: [check, unit-tests, api-tests, e2e-tests]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true 
      - run: gem install kamal
      - uses: docker/setup-buildx-action@v3
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: build image, publish image, and deploy application
        env:
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: kamal deploy -c .kamal/deploy.yaml
  