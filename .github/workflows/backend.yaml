name: backend
permissions:
  contents: read
on:
  push:
    paths:
      - ".github/workflows/backend.yaml"
      - "backend/**"
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt,clippy
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo fmt --check
        run: cargo fmt --check
      - name: SQLX_OFFLINE=1 cargo clippy --all-features --all-targets
        run: SQLX_OFFLINE=1 cargo clippy --all-features --all-targets
      - name: cargo doc --no-deps --all-features
        run: cargo doc --no-deps --all-features
  unit-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: run API tests
        run: cargo test --release
  api-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: run API tests
        run: cargo test --release --test e2e --features=api-test
  spec-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: realworld-axum-react
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v5
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: Build app in release mode
        run: cargo build --release
      - name: Run app in release mode
        env:
          SKIP_EMAIL_VERIFICATION: true   # NB
          SKIP_CAPTCHA_VERIFICATION: true # NB
          SKIP_CONTENT_MODERATION: true   # NB
          IP: 127.0.0.1
          PORT: 8000
          MIGRATE: true
          FRONTEND_URL: http://localhost:8000
          ALLOWED_ORIGINS: '["http://localhost:8000"]'
          # A 256-bit log base64-encoded secret from .env.example
          SECRET_KEY: "R1ltNBHbZ1XngTiBxOo7oEWySPiuUxQ9b2uI2URJ94g="
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/realworld-axum-react
          #  We are skipping email verification for the purpose of the e2e spec tests,
          #  but the token, endpoint, and sender address are still required variable,
          #  so taking from our .env.example (same for captcha and content moderation)
          MAILER_TOKEN: re_D******e_Lz*********************Ts
          MAILER_FROM: onboarding@resend.dev
          MAILER_ENDPOINT: https://api.resend.com
          CAPTCHA_SECRET: 1x0000000000000000000000000000000AA
          OPENAI_API_KEY: sk-proj-***
        run: ./target/release/realworld-axum-react &
      - name: Run Realworld spec tests
        env:
          APIURL: http://localhost:8000/api
        run: |
          git clone https://github.com/gothinkster/realworld.git --branch main --single-branch
          USERNAME=user`date +%s` PASSWORD=password`date +%s` ./realworld/api/run-api-tests.sh
  browser-test:
    uses: "./.github/workflows/browser-test.yaml"
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [check, unit-test, api-test, spec-test, browser-test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true
      - run: gem install kamal
      - uses: docker/setup-buildx-action@v3
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: setup accessories, build and publish image, and deploy application
        env:
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}
          # accessories secrets; once the database is deployed on a dedicated server,
          # these can be removed from here, while `DATABASE_URL` should stay
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          # app runtime secrets:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MAILER_TOKEN: ${{ secrets.MAILER_TOKEN }}
          CAPTCHA_SECRET: ${{ secrets.CAPTCHA_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # note how we are using the `setup` comamand over `deploy`; this is 
          # to ensure that the accessories (including the otlp sidecar) are
          # launched if they are not already running, while if they are running,
          # Kamal will not restart them, rather just skip that step and proceed
          # with the applicaiton deploymentl this is equivalent to running:
          # ```console
          # $ kamal proxy boot -c .kamal/deploy.yaml
          # $ kamal accessory boot all -c .kamal/deploy.yaml
          # $ kamal deploy -c .kamal/deploy.yaml
          # ```
        run: kamal setup -c .kamal/deploy.yaml

