name: backend
permissions:
  contents: read
on:
  push:
    paths:
      - ".github/workflows/backend.yaml"
      - "backend/**"
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  check:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo fmt --check
        run: cargo fmt --check
      - name: SQLX_OFFLINE=1 cargo clippy --all-features --all-targets
        run: SQLX_OFFLINE=1 cargo clippy --all-features --all-targets
      - name: cargo doc --no-deps --all-features
        run: cargo doc --no-deps --all-features
  unit-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: run API tests
        run: cargo test --release
  api-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: run API tests
        run: cargo test --release --test e2e --features=api-test
  browser-test:
    uses: "./.github/workflows/browser-test.yaml"
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [check, unit-test, api-test, browser-test]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v5
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: true
      - run: gem install kamal
      - uses: docker/setup-buildx-action@v3
      - uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: setup accessories, build and publish image, and deploy application
        env:
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}
          # accessories secrets; once the database is deployed on a dedicated server,
          # these can be removed from here, while `DATABASE_URL` should stay
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          # app runtime secrets:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          MAILER_TOKEN: ${{ secrets.MAILER_TOKEN }}
          CAPTCHA_SECRET: ${{ secrets.CAPTCHA_SECRET }}
          # note how we are using the `setup` comamand over `deploy`; this is 
          # to ensure that the accessories (including the otlp sidecar) are
          # launched if they are not already running, while if they are running,
          # Kamal will not restart them, rather just skip that step and proceed
          # with the applicaiton deploymentl this is equivalent to running:
          # ```console
          # $ kamal proxy boot -c .kamal/deploy.yaml
          # $ kamal accessory boot all -c .kamal/deploy.yaml
          # $ kamal deploy -c .kamal/deploy.yaml
          # ```
        run: kamal setup -c .kamal/deploy.yaml

