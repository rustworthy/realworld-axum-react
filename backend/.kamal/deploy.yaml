service: realworld-rocket-react
image: rustworthy/realworld-rocket-react
registry:
  server: ghcr.io
  username: rustworthy
  password:
    - KAMAL_REGISTRY_PASSWORD
builder:
  arch: amd64
  args:
    pgk: realworld-rocket-react

servers:
  web:
    hosts:
      - 91.107.231.70: [ migrator ]

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    ROCKET_ADDRESS: 0.0.0.0
    ROCKET_PORT: 8000
    OTEL_EXPORTER_OTLP_ENDPOINT: http://realworld-rocket-react-otel-collector:4317
    RUST_LOG: "realworld_rocket_react=info,rocket=error"
    ALLOWED_ORIGINS: '["^https://app.realworld-rocket-react.com"]'
    MIGRATE: false
  secret:
    - DATABASE_URL
    - SECRET_KEY
  tags:
    migrator:
      clear:
        MIGRATE: true
 
# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: api.realworld-rocket-react.com
  app_port: 8000 # see `ROCKET_PORT`
  healthcheck:
    interval: 3
    path: /healthz
    timeout: 3

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

accessories:
  otel-collector:
    image: otel/opentelemetry-collector-contrib
    role: web
    files:
      - ./.kamal/otel-config.yaml:/etc/otelcol-contrib/config.yaml
    options:
      add-host:
        - "host.docker.internal:host-gateway"
    env:
      clear: 
        OTEL_EXPORTER_OTLP_BACKEND_ENDPOINT: "host.docker.internal:4317"
  db:
    image: postgres:17
    host: 91.107.231.70
    port: "127.0.0.1:5432:5432"
    directories:
      - postgresql-data:/var/lib/postgresql/data
    env:
      secret:
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_DB
